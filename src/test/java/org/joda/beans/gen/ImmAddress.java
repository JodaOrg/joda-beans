/*
 *  Copyright 2001-2013 Stephen Colebourne
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.joda.beans.gen;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.BasicImmutableBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.google.common.collect.ImmutableMap;

/**
 * Mock address JavaBean, used for testing.
 * 
 * @author Stephen Colebourne
 */
@BeanDefinition
public final class ImmAddress implements ImmutableBean {

    /**
     * The number.
     * This will be the flat, house number or house name.
     */
    @PropertyDefinition
    private final int number;
    /**
     * The street.
     */
    @PropertyDefinition(validate = "notNull")
    private final String street;
    /**
     * The city.
     */
    @PropertyDefinition(validate = "notNull")
    private final String city;
    /**
     * The owner.
     */
    @PropertyDefinition(validate = "notNull")
    private final ImmPerson owner;
    /**
     * The list in map field.
     */
    @PropertyDefinition(validate = "notNull")
    private final ImmutableMap<String, List<String>> listInMap;
    /**
     * The list in map field.
     */
    @PropertyDefinition(validate = "notNull")
    private final ImmutableMap<String, List<Integer>> listNumericInMap;

    //------------------------- AUTOGENERATED START -------------------------
    ///CLOVER:OFF
    /**
     * The meta-bean for {@code ImmAddress}.
     * @return the meta-bean, not null
     */
    public static ImmAddress.Meta meta() {
        return ImmAddress.Meta.INSTANCE;
    }

    static {
        JodaBeanUtils.registerMetaBean(ImmAddress.Meta.INSTANCE);
    }

    /**
     * Returns a builder used to create an instance of the bean.
     *
     * @return the builder, not null
     */
    public static ImmAddress.Builder builder() {
        return new ImmAddress.Builder();
    }

    private ImmAddress(
            int number,
            String street,
            String city,
            ImmPerson owner,
            Map<String, List<String>> listInMap,
            Map<String, List<Integer>> listNumericInMap) {
        JodaBeanUtils.notNull(street, "street");
        JodaBeanUtils.notNull(city, "city");
        JodaBeanUtils.notNull(owner, "owner");
        JodaBeanUtils.notNull(listInMap, "listInMap");
        JodaBeanUtils.notNull(listNumericInMap, "listNumericInMap");
        this.number = number;
        this.street = street;
        this.city = city;
        this.owner = owner;
        this.listInMap = ImmutableMap.copyOf(listInMap);
        this.listNumericInMap = ImmutableMap.copyOf(listNumericInMap);
    }

    @Override
    public ImmAddress.Meta metaBean() {
        return ImmAddress.Meta.INSTANCE;
    }

    @Override
    public <R> Property<R> property(String propertyName) {
        return metaBean().<R>metaProperty(propertyName).createProperty(this);
    }

    @Override
    public Set<String> propertyNames() {
        return metaBean().metaPropertyMap().keySet();
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the number.
     * This will be the flat, house number or house name.
     * @return the value of the property
     */
    public int getNumber() {
        return number;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the street.
     * @return the value of the property, not null
     */
    public String getStreet() {
        return street;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the city.
     * @return the value of the property, not null
     */
    public String getCity() {
        return city;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the owner.
     * @return the value of the property, not null
     */
    public ImmPerson getOwner() {
        return owner;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the list in map field.
     * @return the value of the property, not null
     */
    public ImmutableMap<String, List<String>> getListInMap() {
        return listInMap;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the list in map field.
     * @return the value of the property, not null
     */
    public ImmutableMap<String, List<Integer>> getListNumericInMap() {
        return listNumericInMap;
    }

    //-----------------------------------------------------------------------
    /**
     * Returns a builder that allows this bean to be mutated.
     * @return the mutable builder, not null
     */
    public Builder toBuilder() {
        return new Builder(this);
    }

    @Override
    public ImmAddress clone() {
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            ImmAddress other = (ImmAddress) obj;
            return (getNumber() == other.getNumber()) &&
                    JodaBeanUtils.equal(getStreet(), other.getStreet()) &&
                    JodaBeanUtils.equal(getCity(), other.getCity()) &&
                    JodaBeanUtils.equal(getOwner(), other.getOwner()) &&
                    JodaBeanUtils.equal(getListInMap(), other.getListInMap()) &&
                    JodaBeanUtils.equal(getListNumericInMap(), other.getListNumericInMap());
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash += hash * 31 + JodaBeanUtils.hashCode(getNumber());
        hash += hash * 31 + JodaBeanUtils.hashCode(getStreet());
        hash += hash * 31 + JodaBeanUtils.hashCode(getCity());
        hash += hash * 31 + JodaBeanUtils.hashCode(getOwner());
        hash += hash * 31 + JodaBeanUtils.hashCode(getListInMap());
        hash += hash * 31 + JodaBeanUtils.hashCode(getListNumericInMap());
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(224);
        buf.append("ImmAddress{");
        buf.append("number").append('=').append(getNumber()).append(',').append(' ');
        buf.append("street").append('=').append(getStreet()).append(',').append(' ');
        buf.append("city").append('=').append(getCity()).append(',').append(' ');
        buf.append("owner").append('=').append(getOwner()).append(',').append(' ');
        buf.append("listInMap").append('=').append(getListInMap()).append(',').append(' ');
        buf.append("listNumericInMap").append('=').append(getListNumericInMap());
        buf.append('}');
        return buf.toString();
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code ImmAddress}.
     */
    public static final class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code number} property.
         */
        private final MetaProperty<Integer> number = DirectMetaProperty.ofImmutable(
                this, "number", ImmAddress.class, Integer.TYPE);
        /**
         * The meta-property for the {@code street} property.
         */
        private final MetaProperty<String> street = DirectMetaProperty.ofImmutable(
                this, "street", ImmAddress.class, String.class);
        /**
         * The meta-property for the {@code city} property.
         */
        private final MetaProperty<String> city = DirectMetaProperty.ofImmutable(
                this, "city", ImmAddress.class, String.class);
        /**
         * The meta-property for the {@code owner} property.
         */
        private final MetaProperty<ImmPerson> owner = DirectMetaProperty.ofImmutable(
                this, "owner", ImmAddress.class, ImmPerson.class);
        /**
         * The meta-property for the {@code listInMap} property.
         */
        @SuppressWarnings({"unchecked", "rawtypes" })
        private final MetaProperty<ImmutableMap<String, List<String>>> listInMap = DirectMetaProperty.ofImmutable(
                this, "listInMap", ImmAddress.class, (Class) ImmutableMap.class);
        /**
         * The meta-property for the {@code listNumericInMap} property.
         */
        @SuppressWarnings({"unchecked", "rawtypes" })
        private final MetaProperty<ImmutableMap<String, List<Integer>>> listNumericInMap = DirectMetaProperty.ofImmutable(
                this, "listNumericInMap", ImmAddress.class, (Class) ImmutableMap.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "number",
                "street",
                "city",
                "owner",
                "listInMap",
                "listNumericInMap");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case -1034364087:  // number
                    return number;
                case -891990013:  // street
                    return street;
                case 3053931:  // city
                    return city;
                case 106164915:  // owner
                    return owner;
                case -1244601351:  // listInMap
                    return listInMap;
                case 391098024:  // listNumericInMap
                    return listNumericInMap;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public ImmAddress.Builder builder() {
            return new ImmAddress.Builder();
        }

        @Override
        public Class<? extends ImmAddress> beanType() {
            return ImmAddress.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code number} property.
         * @return the meta-property, not null
         */
        public MetaProperty<Integer> number() {
            return number;
        }

        /**
         * The meta-property for the {@code street} property.
         * @return the meta-property, not null
         */
        public MetaProperty<String> street() {
            return street;
        }

        /**
         * The meta-property for the {@code city} property.
         * @return the meta-property, not null
         */
        public MetaProperty<String> city() {
            return city;
        }

        /**
         * The meta-property for the {@code owner} property.
         * @return the meta-property, not null
         */
        public MetaProperty<ImmPerson> owner() {
            return owner;
        }

        /**
         * The meta-property for the {@code listInMap} property.
         * @return the meta-property, not null
         */
        public MetaProperty<ImmutableMap<String, List<String>>> listInMap() {
            return listInMap;
        }

        /**
         * The meta-property for the {@code listNumericInMap} property.
         * @return the meta-property, not null
         */
        public MetaProperty<ImmutableMap<String, List<Integer>>> listNumericInMap() {
            return listNumericInMap;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case -1034364087:  // number
                    return ((ImmAddress) bean).getNumber();
                case -891990013:  // street
                    return ((ImmAddress) bean).getStreet();
                case 3053931:  // city
                    return ((ImmAddress) bean).getCity();
                case 106164915:  // owner
                    return ((ImmAddress) bean).getOwner();
                case -1244601351:  // listInMap
                    return ((ImmAddress) bean).getListInMap();
                case 391098024:  // listNumericInMap
                    return ((ImmAddress) bean).getListNumericInMap();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            metaProperty(propertyName);
            if (quiet) {
                return;
            }
            throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
        }

    }

    //-----------------------------------------------------------------------
    /**
     * The bean-builder for {@code ImmAddress}.
     */
    public static final class Builder extends BasicImmutableBeanBuilder<ImmAddress> {

        private int number;
        private String street;
        private String city;
        private ImmPerson owner;
        private Map<String, List<String>> listInMap = new HashMap<String, List<String>>();
        private Map<String, List<Integer>> listNumericInMap = new HashMap<String, List<Integer>>();

        /**
         * Restricted constructor.
         */
        private Builder() {
            super(ImmAddress.Meta.INSTANCE);
        }

        /**
         * Restricted copy constructor.
         * @param beanToCopy  the bean to copy from, not null
         */
        private Builder(ImmAddress beanToCopy) {
            super(ImmAddress.Meta.INSTANCE);
            this.number = beanToCopy.getNumber();
            this.street = beanToCopy.getStreet();
            this.city = beanToCopy.getCity();
            this.owner = beanToCopy.getOwner();
            this.listInMap = new HashMap<String, List<String>>(beanToCopy.getListInMap());
            this.listNumericInMap = new HashMap<String, List<Integer>>(beanToCopy.getListNumericInMap());
        }

        //-----------------------------------------------------------------------
        @SuppressWarnings("unchecked")
        @Override
        public Builder set(String propertyName, Object newValue) {
            switch (propertyName.hashCode()) {
                case -1034364087:  // number
                    this.number = (Integer) newValue;
                    break;
                case -891990013:  // street
                    this.street = (String) newValue;
                    break;
                case 3053931:  // city
                    this.city = (String) newValue;
                    break;
                case 106164915:  // owner
                    this.owner = (ImmPerson) newValue;
                    break;
                case -1244601351:  // listInMap
                    this.listInMap = (Map<String, List<String>>) newValue;
                    break;
                case 391098024:  // listNumericInMap
                    this.listNumericInMap = (Map<String, List<Integer>>) newValue;
                    break;
                default:
                    throw new NoSuchElementException("Unknown property: " + propertyName);
            }
            return this;
        }

        @Override
        public ImmAddress build() {
            return new ImmAddress(
                    number,
                    street,
                    city,
                    owner,
                    listInMap,
                    listNumericInMap);
        }

        //-----------------------------------------------------------------------
        /**
         * Sets the {@code number} property in the builder.
         * @param number  the new value, not null
         * @return this, for chaining, not null
         */
        public Builder number(int number) {
            this.number = number;
            return this;
        }

        /**
         * Sets the {@code street} property in the builder.
         * @param street  the new value, not null
         * @return this, for chaining, not null
         */
        public Builder street(String street) {
            JodaBeanUtils.notNull(street, "street");
            this.street = street;
            return this;
        }

        /**
         * Sets the {@code city} property in the builder.
         * @param city  the new value, not null
         * @return this, for chaining, not null
         */
        public Builder city(String city) {
            JodaBeanUtils.notNull(city, "city");
            this.city = city;
            return this;
        }

        /**
         * Sets the {@code owner} property in the builder.
         * @param owner  the new value, not null
         * @return this, for chaining, not null
         */
        public Builder owner(ImmPerson owner) {
            JodaBeanUtils.notNull(owner, "owner");
            this.owner = owner;
            return this;
        }

        /**
         * Sets the {@code listInMap} property in the builder.
         * @param listInMap  the new value, not null
         * @return this, for chaining, not null
         */
        public Builder listInMap(Map<String, List<String>> listInMap) {
            JodaBeanUtils.notNull(listInMap, "listInMap");
            this.listInMap = listInMap;
            return this;
        }

        /**
         * Sets the {@code listNumericInMap} property in the builder.
         * @param listNumericInMap  the new value, not null
         * @return this, for chaining, not null
         */
        public Builder listNumericInMap(Map<String, List<Integer>> listNumericInMap) {
            JodaBeanUtils.notNull(listNumericInMap, "listNumericInMap");
            this.listNumericInMap = listNumericInMap;
            return this;
        }

        //-----------------------------------------------------------------------
        @Override
        public String toString() {
            StringBuilder buf = new StringBuilder(224);
            buf.append("ImmAddress.Builder{");
            buf.append("number").append('=').append(number).append(',').append(' ');
            buf.append("street").append('=').append(street).append(',').append(' ');
            buf.append("city").append('=').append(city).append(',').append(' ');
            buf.append("owner").append('=').append(owner).append(',').append(' ');
            buf.append("listInMap").append('=').append(listInMap).append(',').append(' ');
            buf.append("listNumericInMap").append('=').append(listNumericInMap);
            buf.append('}');
            return buf.toString();
        }

    }

    ///CLOVER:ON
    //-------------------------- AUTOGENERATED END --------------------------
}
