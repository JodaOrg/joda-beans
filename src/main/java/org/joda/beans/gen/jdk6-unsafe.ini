# unsafe copies, that make the resulting bean not fully immutable

# how to copy $value to make it immutable
[immutable.copy]
Collection = Collections.unmodifiableCollection(new ArrayList<>($value))
List = Collections.unmodifiableList(new ArrayList<>($value))
Set = Collections.unmodifiableSet(new HashSet<>($value))
Map = Collections.unmodifiableMap(new HashMap<>($value))
SortedMap = Collections.unmodifiableSortedMap(new TreeMap<>($value))

ArrayList = new ArrayList<>($value)
LinkedList = new LinkedList<>($value)
HashSet = new HashSet<>($value)
SortedSet = new TreeSet<>($value)
TreeSet = new TreeSet<>($value)
HashMap = new HashMap<>($value)
TreeMap = new LinkedList<>($value)
ConcurrentMap = new ConcurrentHashMap<>($value)
ConcurrentHashMap = new ConcurrentHashMap<>($value)
ConcurrentNavigableMap = new ConcurrentSkipListMap<>($value)
ConcurrentSkipListMap = new ConcurrentSkipListMap<>($value)
ImmutableBean = $value
FlexiBean = new FlexiBean($value)

# the type to use for in the builder
[immutable.builder.type]
ArrayList = List<>
LinkedList = List<>
HashSet = Set<>
TreeSet = SortedSet<>
HashMap = Map<>
TreeMap = SortedMap<>
ConcurrentHashMap = ConcurrentMap<>
ConcurrentSkipListMap = ConcurrentNavigableMap<>

# the initializer to use for collections in the builder
[immutable.builder.init]
Collection = new ArrayList<>()
List = new ArrayList<>()
Set = new HashSet<>()
Map = new HashMap<>()
SortedMap = new TreeMap<>()

ArrayList = new ArrayList<>()
LinkedList = new LinkedList<>()
HashSet = new HashSet<>()
SortedSet = new TreeSet<>()
TreeSet = new TreeSet<>()
HashMap = new HashMap<>()
TreeMap = new TreeMap<>()
ConcurrentMap = new ConcurrentHashMap<>()
ConcurrentHashMap = new ConcurrentHashMap<>()
ConcurrentNavigableMap = new ConcurrentSkipListMap<>()
ConcurrentSkipListMap = new ConcurrentSkipListMap<>()
FlexiBean = new FlexiBean()

# types that invalid in immutable beans
[immutable.invalid.type]
StringBuilder =
StringBuffer =
StrBuilder =
