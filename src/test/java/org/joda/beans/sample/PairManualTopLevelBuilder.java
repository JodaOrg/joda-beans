/*
 *  Copyright 2001-present Stephen Colebourne
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.joda.beans.sample;

import java.util.Map;

import org.joda.beans.Bean;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

/**
 * Mock pair, used for testing.
 */
@BeanDefinition(builderName = "PairBuilder", constructorScope = "package")
public final class PairManualTopLevelBuilder implements ImmutableBean {

    /**
     * The first value.
     */
    @PropertyDefinition
    private final String first;
    /**
     * The second value.
     */
    @PropertyDefinition
    private final String second;

    //------------------------- AUTOGENERATED START -------------------------
    /**
     * The meta-bean for {@code PairManualTopLevelBuilder}.
     * @return the meta-bean, not null
     */
    public static PairManualTopLevelBuilder.Meta meta() {
        return PairManualTopLevelBuilder.Meta.INSTANCE;
    }

    static {
        MetaBean.register(PairManualTopLevelBuilder.Meta.INSTANCE);
    }

    /**
     * Returns a builder used to create an instance of the bean.
     * @return the builder, not null
     */
    public static PairBuilder builder() {
        return new PairBuilder();
    }

    /**
     * Creates an instance.
     * @param first  the value of the property
     * @param second  the value of the property
     */
    PairManualTopLevelBuilder(
            String first,
            String second) {
        this.first = first;
        this.second = second;
    }

    @Override
    public PairManualTopLevelBuilder.Meta metaBean() {
        return PairManualTopLevelBuilder.Meta.INSTANCE;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the first value.
     * @return the value of the property
     */
    public String getFirst() {
        return first;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the second value.
     * @return the value of the property
     */
    public String getSecond() {
        return second;
    }

    //-----------------------------------------------------------------------
    /**
     * Returns a builder that allows this bean to be mutated.
     * @return the mutable builder, not null
     */
    public PairBuilder toBuilder() {
        return new PairBuilder(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            PairManualTopLevelBuilder other = (PairManualTopLevelBuilder) obj;
            return JodaBeanUtils.equal(first, other.first) &&
                    JodaBeanUtils.equal(second, other.second);
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(first);
        hash = hash * 31 + JodaBeanUtils.hashCode(second);
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(96);
        buf.append("PairManualTopLevelBuilder{");
        buf.append("first").append('=').append(first).append(',').append(' ');
        buf.append("second").append('=').append(JodaBeanUtils.toString(second));
        buf.append('}');
        return buf.toString();
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code PairManualTopLevelBuilder}.
     */
    public static final class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code first} property.
         */
        private final MetaProperty<String> first = DirectMetaProperty.ofImmutable(
                this, "first", PairManualTopLevelBuilder.class, String.class);
        /**
         * The meta-property for the {@code second} property.
         */
        private final MetaProperty<String> second = DirectMetaProperty.ofImmutable(
                this, "second", PairManualTopLevelBuilder.class, String.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "first",
                "second");

        /**
         * Restricted constructor.
         */
        private Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 97440432:  // first
                    return first;
                case -906279820:  // second
                    return second;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public PairBuilder builder() {
            return new PairBuilder();
        }

        @Override
        public Class<? extends PairManualTopLevelBuilder> beanType() {
            return PairManualTopLevelBuilder.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code first} property.
         * @return the meta-property, not null
         */
        public MetaProperty<String> first() {
            return first;
        }

        /**
         * The meta-property for the {@code second} property.
         * @return the meta-property, not null
         */
        public MetaProperty<String> second() {
            return second;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 97440432:  // first
                    return ((PairManualTopLevelBuilder) bean).getFirst();
                case -906279820:  // second
                    return ((PairManualTopLevelBuilder) bean).getSecond();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            metaProperty(propertyName);
            if (quiet) {
                return;
            }
            throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
        }

    }

    //-------------------------- AUTOGENERATED END --------------------------

}
