/*
 *  Copyright 2001-present Stephen Colebourne
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.joda.beans.sample;

import java.util.Map;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBean;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;
import org.joda.convert.FromString;
import org.joda.convert.ToString;

/**
 * A bean that is also a Joda-Convert type, used for testing.
 * 
 * @author Stephen Colebourne
 */
@BeanDefinition
public class JodaConvertBean extends DirectBean {

    /**
     * The base value.
     */
    @PropertyDefinition
    private String base;
    /**
     * The extra value.
     */
    @PropertyDefinition
    private int extra;

    public JodaConvertBean() {
    }

    @FromString
    public JodaConvertBean(String text) {
        base = text.substring(0, text.indexOf(':'));
        extra = Integer.parseInt(text.substring(text.indexOf(':') + 1));
    }

    @ToString
    public String formattedString() {
        return base + ":" + extra;
    }

    //------------------------- AUTOGENERATED START -------------------------
    /**
     * The meta-bean for {@code JodaConvertBean}.
     * @return the meta-bean, not null
     */
    public static JodaConvertBean.Meta meta() {
        return JodaConvertBean.Meta.INSTANCE;
    }

    static {
        MetaBean.register(JodaConvertBean.Meta.INSTANCE);
    }

    @Override
    public JodaConvertBean.Meta metaBean() {
        return JodaConvertBean.Meta.INSTANCE;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the base value.
     * @return the value of the property
     */
    public String getBase() {
        return base;
    }

    /**
     * Sets the base value.
     * @param base  the new value of the property
     */
    public void setBase(String base) {
        this.base = base;
    }

    /**
     * Gets the the {@code base} property.
     * @return the property, not null
     */
    public final Property<String> base() {
        return metaBean().base().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the extra value.
     * @return the value of the property
     */
    public int getExtra() {
        return extra;
    }

    /**
     * Sets the extra value.
     * @param extra  the new value of the property
     */
    public void setExtra(int extra) {
        this.extra = extra;
    }

    /**
     * Gets the the {@code extra} property.
     * @return the property, not null
     */
    public final Property<Integer> extra() {
        return metaBean().extra().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public JodaConvertBean clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            JodaConvertBean other = (JodaConvertBean) obj;
            return JodaBeanUtils.equal(this.getBase(), other.getBase()) &&
                    (this.getExtra() == other.getExtra());
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(getBase());
        hash = hash * 31 + JodaBeanUtils.hashCode(getExtra());
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(96);
        buf.append("JodaConvertBean{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    protected void toString(StringBuilder buf) {
        buf.append("base").append('=').append(JodaBeanUtils.toString(getBase())).append(',').append(' ');
        buf.append("extra").append('=').append(JodaBeanUtils.toString(getExtra())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code JodaConvertBean}.
     */
    public static class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code base} property.
         */
        private final MetaProperty<String> base = DirectMetaProperty.ofReadWrite(
                this, "base", JodaConvertBean.class, String.class);
        /**
         * The meta-property for the {@code extra} property.
         */
        private final MetaProperty<Integer> extra = DirectMetaProperty.ofReadWrite(
                this, "extra", JodaConvertBean.class, Integer.TYPE);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "base",
                "extra");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 3016401:  // base
                    return this.base;
                case 96965648:  // extra
                    return this.extra;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends JodaConvertBean> builder() {
            return new DirectBeanBuilder<>(new JodaConvertBean());
        }

        @Override
        public Class<? extends JodaConvertBean> beanType() {
            return JodaConvertBean.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code base} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> base() {
            return base;
        }

        /**
         * The meta-property for the {@code extra} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Integer> extra() {
            return extra;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 3016401:  // base
                    return ((JodaConvertBean) bean).getBase();
                case 96965648:  // extra
                    return ((JodaConvertBean) bean).getExtra();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 3016401:  // base
                    ((JodaConvertBean) bean).setBase((String) newValue);
                    return;
                case 96965648:  // extra
                    ((JodaConvertBean) bean).setExtra((Integer) newValue);
                    return;
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    //-------------------------- AUTOGENERATED END --------------------------
}
