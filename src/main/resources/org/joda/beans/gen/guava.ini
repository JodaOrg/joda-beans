# copies requiring Guava library

# how to copy $value to make it immutable
[immutable.builder.to.immutable]
Collection = ImmutableCollection.copyOf($value)
List = ImmutableList.copyOf($value)
Set = ImmutableSet.copyOf($value)
SortedSet = ImmutableSortedSet.copyOf($value)
Map = ImmutableMap.copyOf($value)
SortedMap = ImmutableSortedMap.copyOf($value)
NavigableSet = Sets.unmodifiableNavigableSet(Sets.newTreeSet($value))
NavigableMap = Maps.unmodifiableNavigableMap(Maps.newTreeMap($value))
BiMap = ImmutableBiMap.copyOf($value)
Multimap = ImmutableMultimap.copyOf($value)
ListMultimap = ImmutableListMultimap.copyOf($value)
SetMultimap = ImmutableSetMultimap.copyOf($value)
Multiset = ImmutableMultiset.copyOf($value)
SortedMultiset = ImmutableSortedMultiset.copyOf($value)
ImmutableCollection = ImmutableCollection.copyOf($value)
ImmutableList = ImmutableList.copyOf($value)
ImmutableSet = ImmutableSet.copyOf($value)
ImmutableSortedSet = ImmutableSortedSet.copyOf($value)
ImmutableMap = ImmutableMap.copyOf($value)
ImmutableSortedMap = ImmutableSortedMap.copyOf($value)
ImmutableBiMap = ImmutableBiMap.copyOf($value)
ImmutableMultimap = ImmutableMultimap.copyOf($value)
ImmutableListMultimap = ImmutableListMultimap.copyOf($value)
ImmutableSetMultimap = ImmutableSetMultimap.copyOf($value)
ImmutableMultiset = ImmutableMultiset.copyOf($value)
ImmutableSortedMultiset = ImmutableSortedMultiset.copyOf($value)
ImmutableBean = $value

# how to copy $value to make it mutable
[immutable.builder.to.mutable]
Collection = new ArrayList<>($value)
List = new ArrayList<>($value)
Set = new HashSet<>($value)
SortedSet = new TreeSet<>($value)
Map = new HashMap<>($value)
SortedMap = new TreeMap<>($value)
NavigableSet = new TreeSet<>($value))
NavigableMap = new TreeMap<>($value)
BiMap = HashBiMap.create($value)
Multimap = HashMultimap.create($value)
ListMultimap = ArrayListMultimap.create($value)
SetMultimap = HashMultimap.create($value)
Multiset = HashMultiset.create($value)
SortedMultiset = TreeMultiset.create($value)
ImmutableCollection = new ArrayList<>($value)
ImmutableList = new ArrayList<>($value)
ImmutableSet = new HashSet<>($value)
ImmutableSortedSet = new TreeSet<>($value)
ImmutableMap = new HashMap<>($value)
ImmutableSortedMap = new TreeMap<>($value)
ImmutableBiMap = HashBiMap.create($value)
ImmutableMultimap = HashMultimap.create($value)
ImmutableListMultimap = ArrayListMultimap.create($value)
ImmutableSetMultimap = HashMultimap.create($value)
ImmutableMultiset = HashMultiset.create($value)
ImmutableSortedMultiset = TreeMultiset.create($value)
ImmutableBean = $value

# the type to use for in the builder
[immutable.builder.type]
ImmutableCollection = Collection<>
ImmutableList = List<>
ImmutableSet = Set<>
ImmutableSortedSet = SortedSet<>
ImmutableMap = Map<>
ImmutableSortedMap = SortedMap<>
ImmutableBiMap = BiMap<>
ImmutableMultimap = Multimap<>
ImmutableListMultimap = ListMultimap<>
ImmutableSetMultimap = SetMultimap<>
ImmutableMultiset = Multiset<>
ImmutableSortedMultiset = SortedMultiset<>

# the initializer to use for collections in the builder
[immutable.builder.init]
Collection = new ArrayList<>()
List = new ArrayList<>()
Set = new HashSet<>()
SortedSet = new TreeSet<>()
Map = new HashMap<>()
SortedMap = new TreeMap<>()
NavigableSet = new TreeSet<>()
NavigableMap = new TreeMap<>()
BiMap = HashBiMap.create()
Multimap = HashMultimap.create()
ListMultimap = ArrayListMultimap.create()
SetMultimap = HashMultimap.create()
Multiset = HashMultiset.create()
SortedMultiset = TreeMultiset.create()
ImmutableCollection = new ArrayList<>()
ImmutableList = new ArrayList<>()
ImmutableSet = new HashSet<>()
ImmutableSortedSet = new TreeSet<>()
ImmutableMap = new HashMap<>()
ImmutableSortedMap = new TreeMap<>()
ImmutableBiMap = HashBiMap.create()
ImmutableMultimap = HashMultimap.create()
ImmutableListMultimap = ArrayListMultimap.create()
ImmutableSetMultimap = HashMultimap.create()
ImmutableMultiset = HashMultiset.create()
ImmutableSortedMultiset = TreeMultiset.create()

# provide the ability to handle clone-on-get or immutable classes
[immutable.get.clone]
Date = cloneCast
Object[] = clone
String[] = clone
byte[] = clone
char[] = clone
short[] = clone
int[] = clone
long[] = clone
float[] = clone
double[] = clone

# types that invalid in immutable beans
[immutable.invalid.type]
StringBuilder =
StringBuffer =
ConcurrentMap =
ConcurrentNavigableMap =
ArrayList =
LinkedList =
HashSet =
TreeSet =
HashMap =
TreeMap =
ConcurrentHashMap =
ConcurrentSkipListMap =
Bean =
FlexiBean =
StrBuilder =
